---
import { renderMarkdown } from "@astrojs/markdown-remark";

import people from "../data/people.yaml";

export async function parseMarkdown(toParse = "") {
  const output = await renderMarkdown(toParse);
  return output.code;
}

// This whole shenanigans is required to use dynamic imports in the SSR/build step.
const images = import.meta.glob("../assets/people/*");
for (const person of people) {
  const image = await images[`../assets/${person.image}`]();
  person.imageSrc = image.default.src;

  // might as well parse and render any markdown asynchronously here too,
  //  while we're at it.
  const { code: html } = await renderMarkdown(person.text, {});
  person.html = html;
}
---

{
  people
    .sort((a, b) => a.sort.localeCompare(b.sort))
    .map((person) => (
      <section>
        <header>
          <h2>{(person.link && <a href={person.link}>{person.name}</a>) || person.name}</h2>
          <span>{person.title}</span>
        </header>
        <article set:html={person.html} />
        {(person.link && (
          <a href={person.link} class="image">
            <img src={person.imageSrc} alt={person.name} width="120" height="160" />
          </a>
        )) || <img src={person.imageSrc} alt={person.name} width="120" height="160" class="image" />}
      </section>
    ))
}

<style>
  section {
    align-items: end;
    display: grid;
    gap: 0.5em 1em;
    grid-template-areas: "header image" "text text";
    grid-template-columns: 1fr auto;
    grid-template-rows: auto 1fr;

    & + section {
      margin-top: 2em;
    }
  }

  header {
    text-align: right;

    h2 {
      color: var(--cardinal);
      font-size: 2rem;
      font-variant: petite-caps;
      font-weight: 400;
      line-height: 1;
    }

    span {
      display: block;
      font-size: 0.8em;
      font-style: italic;
      line-height: 1.2;
      margin-top: 0.4em;
    }
  }

  article {
    border-top: 1px solid var(--cardinal);
    font-size: smaller;
    grid-area: text;
    padding-top: 0.5em;
    text-align: justify;
  }

  .image {
    grid-area: image;
  }

  img {
    border: 2px solid var(--cardinal);
    border-radius: 0.25em;
    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175);
    box-sizing: content-box;
    padding: 2px;
  }

  section:nth-child(even) {
    grid-template-areas: "image header" "text text";
    grid-template-columns: auto 1fr;

    header {
      text-align: left;
    }
  }

  @media screen and (min-width: 768px) {
    section {
      align-items: start;
      grid-template-areas: "header image" "text image";
    }

    section:nth-child(even) {
      grid-template-areas: "image header" "image text";
    }
  }
</style>
