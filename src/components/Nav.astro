---
import Icon from "./Icon.astro";

const pathname = Astro.url.pathname;
const base = "/";

export const links = [
  { label: "Home", icon: "home", url: "" },
  { label: "People", url: "people/" },
  { label: "Dev. Team", url: "developers/" },
  { label: "ATS Program", url: "ats-program/" },
  { label: "Projects", url: "projects/" },
  { label: "Workshops", url: "workshops/" },
  { label: "Consulting", url: "consulting/" },
  { label: "Data", url: "data/" },
];
---

<input type="checkbox" id="menu-toggle" />
<label for="menu-toggle">
  <span class="diagonal-1">&nbsp;</span>
  <span class="horizontal">&nbsp;</span>
  <span class="diagonal-2">&nbsp;</span>
</label>
<nav>
  {
    links.map(({ label, url, icon = false }) => (
      <a
        class={pathname === base + url ? "active" : null}
        href={pathname === base + url ? null : base + url}
        aria-label={icon ? label : null}
      >
        {icon ? <Icon name={icon} /> : label}
      </a>
    ))
  }
</nav>

<style>
  label {
    cursor: pointer;
    height: 22px;
    right: 15px;
    position: absolute;
    position: absolute;
    top: calc((var(--sticky-offset) - 0.75em) / 2);
    transition: all 0.3s;
    width: 22px;
    z-index: 99;

    span {
      background-color: var(--cardinal);
      height: 3px;
      position: absolute;
      transition: all 0.3s;
      user-select: none;
      width: 100%;

      &.horizontal {
        float: left;
        margin-top: 3px;
        position: relative;
      }

      &.diagonal-1 {
        float: left;
        position: relative;
      }

      &.diagonal-2 {
        float: left;
        margin-top: 3px;
        position: relative;
      }
    }
  }

  input {
    display: none;

    &:checked ~ label {
      .horizontal {
        box-sizing: border-box;
        opacity: 0;
      }

      .diagonal-1 {
        box-sizing: border-box;
        transform: rotate(135deg);
        margin-top: 8px;
      }

      .diagonal-2 {
        box-sizing: border-box;
        transform: rotate(-135deg);
        margin-top: -9px;
      }
    }

    &:checked ~ nav {
      margin-top: 0;
    }
  }

  nav {
    --nav-item-height: 30px;
    --nav-vertical-gap: 0.5em;

    align-items: center;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: var(--nav-vertical-gap) 0.8em;
    justify-content: center;
    margin: 0 auto;
    margin-top: calc(
      -1 * (var(--nav-item-height) * 8 + var(--nav-vertical-gap) * 7)
    );
    padding: 0 0.5em;
    transition: margin-top 0.3s ease;
    width: var(--wrap);
    z-index: -1;
  }

  a {
    display: inline-block;
    position: relative;
    text-decoration: none;
    color: var(--cardinal);
    font-size: 1.1em;
    height: var(--nav-item-height);
    white-space: nowrap;

    &[href] {
      &:after {
        background-color: var(--cardinal);
        bottom: -1px;
        content: "";
        height: 1px;
        left: 50%;
        pointer-events: none;
        position: absolute;
        transition-duration: 400ms;
        transition-property: width, left;
        transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
        width: 0%;
      }

      &:focus,
      &:hover {
        color: var(--black-1);

        &:after {
          left: 0%;
          width: 100%;
        }
      }
    }

    &:not([href]) {
      color: var(--black-1);

      &:after {
        background-color: var(--cardinal);
        bottom: -2px;
        content: "";
        height: 2px;
        pointer-events: none;
        position: absolute;
        width: 100%;
        left: 0%;
      }
    }

    :global(svg) {
      height: 1.2rem;
      width: 1.2rem;
      transform: translateY(2px);
      vertical-align: baseline;
    }
  }

  @media screen and (min-width: 750px) {
    label {
      display: none;
    }

    nav {
      flex-direction: row;
      justify-content: flex-start;
      margin-top: 0;
      transition: none;
    }
  }

  @media screen and (min-width: 980px) {
    nav {
      gap: 0.5em 2em;
    }

    a {
      font-size: 1.2em;
    }
  }
</style>
